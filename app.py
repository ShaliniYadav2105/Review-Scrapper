{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, render_tempelate, request, jsonify\n",
    "from flask_cors import CORS,cross_origin\n",
    "import requests\n",
    "from bs4 import BeautifulSoup as bs\n",
    "from urllib.request import urlopen as uReq\n",
    "\n",
    "app = Flask(__name__)# initialising the flask app with the name 'app'\n",
    "CORS(app)\n",
    "\n",
    "@app.route('/', methods=['GET'])\n",
    "@cross_origin()\n",
    "def homepage():\n",
    "    return render_template('index.html')\n",
    "\n",
    "# base url + /\n",
    "#http://localhost:8000 + /\n",
    "\n",
    "@app.route('/scrap',methods=['POST']) # route with allowed methods as POST and GET\n",
    "def index():\n",
    "    if request.method == 'POST':\n",
    "        searchString = request.form['content'].replace(\" \",\"\") # obtaining the search string entered in the form\n",
    "        \n",
    "    #try:\n",
    "        flipkart_url = \"https://www.flipkart.com/search?q=\" + searchString #preparing the URL to search the product on flipkart\n",
    "        print(flipkart_url) # requesting the webpage from the internet\n",
    "        flipkartPage = uClient.read() #reading the webpage\n",
    "        uClient.close() # closing the connection to the web server\n",
    "        flipkart_html = bs(flipkartPage, \"html.parser\") # parsing the webpage as HTML\n",
    "        bigboxes = flipkart_html.findAL(\"div\", {\"class\": \"_1AtVbE col-12-12\"}) # searching for appropriate tag to redirect to the product link\n",
    "        del bigboxes[0:3] # the first 3 members of the list do not contain relevant information, hence deleting them.\n",
    "        print(bigboxes)\n",
    "        box = bigboxes[0] # taking the first iteration (for demo)\n",
    "        print(box)\n",
    "        prductLink = \"https://www.flipjart.com\" + box.div.div.div.a['href'] # extracting the actual product link\n",
    "        prodRes = requests.get(productLink) # getting the product page from server\n",
    "        prod_html = bs(prodRes.text, \"html.parser\") # parsing the product page as HTML\n",
    "        commnetboxes = prod_html.find_all('div', {'class':\"_16Blm\"}) # finding the HTML section containing the customer comments\n",
    "        \n",
    "        reviews = [] # initializing an empty list for reviews\n",
    "        # iterating over the comment section to get the details of customer and their comments\n",
    "        for commentbox in commentboxes:\n",
    "            try:\n",
    "                name = commentbox.div.div.find_all('p', {'class':'_2sc7ZR _2V5EHH'})[0].text\n",
    "            \n",
    "            except:\n",
    "                name = 'No Name'\n",
    "                \n",
    "            try:\n",
    "                ratig = commentbox.div.div.div.div.text\n",
    "                \n",
    "            except:\n",
    "                rating = 'No Rating'\n",
    "                \n",
    "            try:\n",
    "                commentHead = commentbox.div.div.div.p.text\n",
    "                \n",
    "            except:\n",
    "                commentHead = 'No Comment Heading'\n",
    "                \n",
    "            try:\n",
    "                comtag = commentbox.div.div.find_all('div', {'class': ''})\n",
    "                custComment = comtag[0].div.text\n",
    "                \n",
    "            except:\n",
    "                custComment = 'No Customer Comment'\n",
    "                \n",
    "            mydict = {\"Product\": searchString, \"Name\": name, \"Rating\": rating, \"CommentHead\": commentHead,\n",
    "                     \"Comment\": custComment} # saving that detail to a dictionary\n",
    "            reviews.append(mydict) # appending the comments to the review list\n",
    "        return render_template('results.html', reviews=reviews) # showing the review to the user\n",
    "    #except:\n",
    "     # return 'something is wrong'\n",
    "        \n",
    "if __name == \"__main__\":\n",
    "    app.run(port=8000,debug=True) # running the app on the local machine on port 8000\n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
